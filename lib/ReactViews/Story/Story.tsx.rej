diff a/lib/ReactViews/Story/Story.tsx b/lib/ReactViews/Story/Story.tsx	(rejected hunks)
@@ -148,40 +144,24 @@
     hideList(props);
   };
 
-const StoryMenu = (props: MenuProps) => {
-  const { t } = useTranslation();
-  const menuRef = useRef<HTMLDivElement | null>(null);
-  useLayoutEffect(() => {
-    // Adjust the position of the menu so it stays inside the scroll container.
+const calculateOffset =
+  (props: Props) => (storyRef: React.RefObject<HTMLElement>) => {
+    const offsetTop = storyRef.current?.offsetTop || 0;
+    const scrollTop = props.parentRef.current.scrollTop || 0;
+    const heightParent =
+      (storyRef.current?.offsetParent as HTMLElement)?.offsetHeight || 0;
 
-    if (!menuRef.current) return;
-    if (!props.parentRef.current) return;
+    const offsetTopScroll = offsetTop - scrollTop + 25;
+    if (offsetTopScroll + 125 > heightParent) {
+      return `bottom ${offsetTopScroll + 125 - heightParent + 45}px;`;
+    }
+    return `top: ${offsetTopScroll}px;`;
+  };
 
-    // Grow downwards, by default:
-    Object.assign(menuRef.current.style, { top: "0px", bottom: "unset" });
+const renderMenu = (props: MenuProps) => {
+  const { t } = props;
 
-    const selfRect = menuRef.current.getBoundingClientRect();
-    const parentRect = props.parentRef.current.getBoundingClientRect();
-    if (selfRect.bottom > parentRect.bottom) {
-      // Looks like there's no room to the bottom; grow upwards.
-      Object.assign(menuRef.current.style, { top: "unset", bottom: "0px" });
-    }
-  }, [props.parentRef]);
   return (
-    <Box
-      ref={menuRef}
-      css={`
-        position: absolute;
-        z-index: 100;
-        right: 0px;
-        padding: 0;
-        margin: 0;
-
-        ul {
-          list-style: none;
-        }
-      `}
-    >
     <Ul column>
       <li>
         <StoryMenuButton
@@ -303,8 +284,26 @@
               />
             </MenuButton>
           </Box>
-          {props.menuOpen && <StoryMenu {...props} storyRef={storyRef} />}
+          {props.menuOpen && (
+            <Box
+              css={`
+                position: absolute;
+                z-index: 100;
+                right: 20px;
+
+                ${calculateOffset(props)(storyRef)}
+                padding: 0;
+                margin: 0;
+
+                ul {
+                  list-style: none;
+                }
+              `}
+            >
+              {renderMenu({ ...props, t })}
             </Box>
+          )}
+        </Box>
         {bodyText.length > 0 && (
           <Box paddedRatio={2} paddedHorizontally={3}>
             <Text textLight medium>
